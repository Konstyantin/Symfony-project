<?php

namespace CarBundle\Repository;

/**
 * CarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get body data
     *
     * Return body data by car id
     *
     * @param int $id
     * @return mixed
     */
    public function getBodyData($id)
    {
        $query = $this->createQueryBuilder('c')
            ->join('CarBundle:Body', 'b', 'WITH', 'c.body = b.id')
            ->where('c.id = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * Get dynamics data
     *
     * Return dynamics data by car id
     *
     * @param int $id
     * @return mixed
     */
    public function getDynamicsData($id)
    {
        $query = $this->createQueryBuilder('c')
            ->join('CarBundle:Dynamics', 'd', 'WITH', 'c.dynamics = d.id')
            ->where('c.id = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * Get fuel data
     *
     * Return fuel data by car id
     *
     * @param int $id
     * @return mixed
     */
    public function getFuelData($id)
    {
        $query = $this->createQueryBuilder('c')
            ->join('CarBundle:Fuel', 'f', 'WITH', 'c.fuel = f.id')
            ->where('c.id = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * Get cars by model
     *
     * Get car list item by model item
     *
     * @param string $model
     * @return array
     */
    public function getCarsByModel(string $model)
    {
        $query = $this->createQueryBuilder('c')
            ->join('CarBundle:Model', 'm', 'WITH', 'c.model = m.id')
            ->where('m.slug =:model')
            ->setParameter('model', $model)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get item model car
     *
     * Get car item by model name and car item name
     *
     * @param string $model
     * @param string $carName
     * @return array
     */
    public function getItemModelCar(string $model, string $carName)
    {
        $query = $this->createQueryBuilder('c')
            ->join('CarBundle:Model', 'm', 'WITH', 'c.model = m.id')
            ->where('m.slug =:model')
            ->andwhere('c.slug =:carName')
            ->setParameter('model', $model)
            ->setParameter('carName', $carName)
            ->getQuery();


        return $query->getOneOrNullResult();
    }

    /**
     * Get available car list
     *
     * Get car items list which is available
     *
     * @return array
     */
    public function getAvailableCarList()
    {
        $query = $this->createQueryBuilder('c')
            ->join('CarBundle:Model', 'm', 'WITH', 'c.model = m.id')
            ->where('c.available = 1')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get car by user id
     *
     * Get car list query by user id
     *
     * @param $userId
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getCarsByUserId($userId)
    {
        $userId = ($this->getUsersCar($userId)) ? $userId : null;

        $query = $this->createQueryBuilder('car');

        $query = ($userId) ? $query->join('UserBundle:UserCar', 'user_car', 'WITH', 'car.id = user_car.car')
            ->where('user_car.user =:userId')
            ->setParameter('userId', $userId) : $query;

        $query->orderBy('car.id', 'ASC');

        return $query;
    }

    /**
     * Get user car
     *
     * @param int $userId
     * @return array
     */
    public function getUsersCar(int $userId)
    {
        $query = $this->createQueryBuilder('car')
            ->join('car.userCar', 'user_car')
            ->where('user_car.user =:userId')
            ->setParameter('userId', $userId)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get car item by name
     *
     * Get car item by passer name param
     *
     * @param string $name
     * @return mixed
     */
    public function getCarItemByName(string $name)
    {
        $query = $this->createQueryBuilder('car')
            ->where('car.name =:name')
            ->setParameter('name', $name)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * Search car by name
     *
     * Search car collection by passed car name param
     *
     * @param string $name
     * @return array
     */
    public function searchCarByName(string $name)
    {
        $query = $this->createQueryBuilder('car')
            ->leftJoin('car.imageLogo', 'image_logo')
            ->select('car.name', 'car.id', 'car.slug')
            ->addSelect('image_logo.id as imageId', 'image_logo.providerReference')
            ->where('car.name LIKE :name')
            ->setParameter('name', '%' . $name . '%')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Search car
     *
     * Get car list collection
     *
     * @return array
     */
    public function searchCar()
    {
        $query = $this->createQueryBuilder('car')
            ->leftJoin('car.imageLogo', 'image_logo')
            ->select('car.name', 'car.id', 'car.slug')
            ->addSelect('image_logo.id as imageId', 'image_logo.providerReference')
            ->getQuery();

        return $query->getResult();
    }
}
